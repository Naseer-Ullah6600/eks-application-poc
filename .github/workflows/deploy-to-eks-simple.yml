name: Deploy to EKS (Simple)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: zad-dev-ecr
  EKS_CLUSTER_NAME: zad-eks-dev
  EKS_CLUSTER_REGION: eu-west-3

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        python -m pytest --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Generate image tag
      id: image-tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker image
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }} .
        docker tag ${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}

    - name: Push Docker image
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.EKS_CLUSTER_REGION }}

    - name: Update kube config
      run: |
        aws eks update-kubeconfig --region ${{ env.EKS_CLUSTER_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to EKS
      run: |
        # Set environment variables
        export ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        export ECR_REPOSITORY="${{ env.ECR_REPOSITORY }}"
        export IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        
        # Create namespace if it doesn't exist
        kubectl apply -f k8s/namespace.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/eks-demo-app -n default --timeout=300s
        
        # Get service information
        kubectl get svc -n default
        kubectl get pods -n default

    - name: Verify deployment
      run: |
        # Check if pods are running
        kubectl get pods -n default -l app=eks-demo-app
        
        # Check service status
        kubectl get svc eks-demo-app-service -n default
        
        # Check ingress status
        kubectl get ingress eks-demo-app-ingress -n default

  notify:
    needs: [deploy-to-eks]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-to-eks.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Application deployed to EKS cluster: ${{ env.EKS_CLUSTER_NAME }}"
          echo "üì¶ Image: ${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image-tag }}"
        else
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for more details"
          exit 1
        fi
